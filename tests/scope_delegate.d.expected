// Basic type
void foo(scope int delegate() dg) {}

// Leading dot + identifier
void foo1(scope .Foo delegate() dg) {}
// Fully qualified identifier
void foo2(scope Weird.Identity!(int) delegate(int, void) dg) {}

// TemplateInstance
void foo3(scope Identity!(int) delegate() dg) {}
// FQ TI
void foo4(scope Something.Identity!(int) delegate() dg) {}
// leading dot, FQ, TI
void foo5(scope .Something.Identity!(int) delegate(int, void) dg) {}

/// Nested are *not* processed
void foo6(scope .Something.Identity!(int) delegate(.Something.Identity!(void*) delegate()) dg) {}

/// Aliases are processed
public alias scope size_t delegate (Const!(T)[]) Sink;
public alias scope size_t delegate (T[]) MutableSink;

public class Foobar
{
    this (scope void delegate () dg) {}
}

// `scope` STC is ignored on `alias`, so the user might need to manually add it
public void write (scope Sink sink, in char[] data) {}
